// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Shooter.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "WPILib.h"
#include <CANTalon.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
Shooter::Shooter() : PIDSubsystem("Shooter", 1.0, 0.0, 0.0) {

    SetAbsoluteTolerance(0.2);
    GetPIDController()->SetContinuous(false);
    LiveWindow::GetInstance()->AddActuator("Shooter", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID


    //shooterEncoder = RobotMap::shooterShooterEncoder;
    shooterMotor = RobotMap::shooterShooterMotor;

    ftestShooter = RobotMap::shooterShooterMotor;

    //shooterEncoder = RobotMap::shooterShooterMotor->SetFeedbackDevice(CANTalon::CtreMagEncoder_Absolute);

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}

double Shooter::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return shooterEncoder->PIDGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}


void Shooter::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    shooterMotor->PIDWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Shooter::justShootMe(){
	ftestShooter->SelectProfileSlot(0);
	ftestShooter->SetControlMode(CANTalon::ControlMode::kSpeed);
	ftestShooter->Set(9000);
	SmartDashboard::PutNumber("SHOOTER" ,ftestShooter->GetEncVel());


}

void Shooter::shootRaw(){
	ftestShooter->Set(0.67);
}
void Shooter::stopShooter(){
	ftestShooter->Set(0.0);
}
int Shooter::returnVel(){
	return ftestShooter->GetEncVel();
}
float Shooter::returnVoltVal(){
	return ftestShooter->GetOutputVoltage();
//	return 1;
}
float Shooter::returnAmpVal(){
	return ftestShooter->GetOutputCurrent();
}
