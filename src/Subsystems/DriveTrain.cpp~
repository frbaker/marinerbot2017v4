// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "DriveTrain.h"
#include "../RobotMap.h"
#include "Commands/DriveWithJoy.h"
#include <AHRS.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    lf = RobotMap::driveTrainLf;
    rf = RobotMap::driveTrainRf;
    lr = RobotMap::driveTrainLr;
    rr = RobotMap::driveTrainRr;
    mecanum = RobotMap::driveTrainMecanum;
    rbGyro = RobotMap::driveTrainRbGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //gg = RobotMap::driveGyro;
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoy());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::takeJoystickInputs(double x, double y, double z, double angle){
	DriveTrain::mecanum->MecanumDrive_Cartesian(Db(x), Db(y), Db(z), angle);
}
void DriveTrain::stop(){
	DriveTrain::mecanum->MecanumDrive_Cartesian(0.0, 0.0, 0.0, 0.0);
}


double DriveTrain::Db(double axisVal){
	if (axisVal < -0.10){
		if(axisVal <= -0.75){
			return -0.75;
		}
	return axisVal;

	}
	else if (axisVal > 0.10){
		if(axisVal >= 0.75){
			return 0.75;
		}
		return axisVal;
	}

	return 0;

}

