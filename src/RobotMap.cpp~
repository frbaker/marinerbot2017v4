// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include <WPILib.h>
#include <AHRS.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::driveTrainLf;
std::shared_ptr<CANTalon> RobotMap::driveTrainRf;
std::shared_ptr<CANTalon> RobotMap::driveTrainLr;
std::shared_ptr<CANTalon> RobotMap::driveTrainRr;
std::shared_ptr<RobotDrive> RobotMap::driveTrainMecanum;
std::shared_ptr<AnalogGyro> RobotMap::driveTrainRbGyro;
std::shared_ptr<Relay> RobotMap::ballFeederBallFeederSpike;
std::shared_ptr<SpeedController> RobotMap::conveyerSpeedController1;
std::shared_ptr<SpeedController> RobotMap::gearMoverGearSparkMotor;
std::shared_ptr<Encoder> RobotMap::shooterShooterEncoder;
std::shared_ptr<CANTalon> RobotMap::shooterShooterMotor;
std::shared_ptr<CANTalon> RobotMap::climberClimberMotor;
std::shared_ptr<SpeedController> RobotMap::shooterAdjusterSpeedController1;
//std::shared_ptr<AnalogPotentiometer> RobotMap::shooterAdjusterShooterPot;
std::shared_ptr<AnalogInput> RobotMap::shooterAdjusterShooterPot;
std::shared_ptr<Relay> RobotMap::ledsLedSpike;
std::shared_ptr<Relay> RobotMap::ropeGatherRopeGatherRelay;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<AHRS> RobotMap::driveGyro;
std::shared_ptr<AnalogGyro> RobotMap::agyro;


void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveTrainLf.reset(new CANTalon(3));
    lw->AddActuator("DriveTrain", "Lf", driveTrainLf);
    
    driveTrainRf.reset(new CANTalon(7));
    lw->AddActuator("DriveTrain", "Rf", driveTrainRf);
    
    driveTrainLr.reset(new CANTalon(0));
    lw->AddActuator("DriveTrain", "Lr", driveTrainLr);
    
    driveTrainRr.reset(new CANTalon(5));
    lw->AddActuator("DriveTrain", "Rr", driveTrainRr);
    
    driveTrainMecanum.reset(new RobotDrive(driveTrainLf, driveTrainLr,
              driveTrainRf, driveTrainRr));
    
    driveTrainMecanum->SetSafetyEnabled(false);
        driveTrainMecanum->SetExpiration(0.1);
        driveTrainMecanum->SetSensitivity(0.5);
        driveTrainMecanum->SetMaxOutput(1.0);

        driveTrainMecanum->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        driveTrainMecanum->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
    driveTrainRbGyro.reset(new AnalogGyro(0));
    lw->AddSensor("DriveTrain", "RbGyro", driveTrainRbGyro);
    driveTrainRbGyro->SetSensitivity(0.007);
    ballFeederBallFeederSpike.reset(new Relay(0));
    lw->AddActuator("BallFeeder", "BallFeederSpike", ballFeederBallFeederSpike);
    
    conveyerSpeedController1.reset(new Spark(0));
    lw->AddActuator("Conveyer", "Speed Controller 1", std::static_pointer_cast<Spark>(conveyerSpeedController1));
    
    gearMoverGearSparkMotor.reset(new Spark(9));
    lw->AddActuator("GearMover", "GearSparkMotor", std::static_pointer_cast<Spark>(gearMoverGearSparkMotor));
    
    shooterShooterEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("Shooter", "ShooterEncoder", shooterShooterEncoder);
    shooterShooterEncoder->SetDistancePerPulse(1.0);
    shooterShooterEncoder->SetPIDSourceType(PIDSourceType::kRate);
    shooterShooterMotor.reset(new CANTalon(13));
    lw->AddActuator("Shooter", "ShooterMotor", shooterShooterMotor);
    
    climberClimberMotor.reset(new CANTalon(8));
    lw->AddActuator("Climber", "ClimberMotor", climberClimberMotor);
    
    shooterAdjusterSpeedController1.reset(new VictorSP(1));
    lw->AddActuator("ShooterAdjuster", "Speed Controller 1", std::static_pointer_cast<VictorSP>(shooterAdjusterSpeedController1));
    
    shooterAdjusterShooterPot.reset(new AnalogPotentiometer(1, 1.0, 0.0));
    lw->AddSensor("ShooterAdjuster", "ShooterPot", shooterAdjusterShooterPot);
    
    ledsLedSpike.reset(new Relay(1));
    lw->AddActuator("Leds", "LedSpike", ledsLedSpike);
    
    ropeGatherRopeGatherRelay.reset(new Relay(3));
    lw->AddActuator("RopeGather", "RopeGatherRelay", ropeGatherRopeGatherRelay);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


}
