// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include <WPILib.h>
#include <ctime>
#include "AutonomousCommand.h"
#include "FireBalls.h"


AutonomousCommand::AutonomousCommand(): Command() {

	Requires(Robot::driveTrain.get());

}

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	setAutonStep(1); // initialize on step 1
	setStartTime(Timer::GetFPGATimestamp());
	setElapsedTime(0.0);
	SmartDashboard::PutNumber("Elapsed Time", 0);
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	//foreach iteration, this will record the amount of elapsed time
	setElapsedTime(getStartTime());

	//If the elapsed time is > 15 seconds, we need everything to stop
	if (getElapsedTime() > 15){
		setAutonStep(1); // initialize on step 1
		End();
		this->Cancel();
	}

	//gets the number of the autonomouse routine we want to run
	int autonNumber = SmartDashboard::GetNumber("autonNumber",1);

	//The Switch will determine which routine runs based on which autonNumber we choose
	switch(autonNumber){
	case 1:
		SmartDashboard::PutNumber("Running Autonomous Routine", autonNumber);
		auton1(); //Runs auton1 - currently just shoots the balls
		break;
	case 2:
		SmartDashboard::PutNumber("Running Autonomous Routine", autonNumber);
		auton2(); //Runs auton2 - attempts a timed drive/turn/shoot routine
		break;
	case 3:
		SmartDashboard::PutNumber("Running Autonomous Routine", autonNumber);
		auton3(); //Runs auton3 - no actions are coded
		break;
	case 4:
		SmartDashboard::PutNumber("Running Autonomous Routine", autonNumber);
		auton4(); //Runs auton4 - no actions are coded
		break;
	case 5:
		SmartDashboard::PutNumber("Running Autonomous Routine", autonNumber);
		auton5(); //Runs auton5 - no actions are coded
		break;
	case 6:
		SmartDashboard::PutNumber("Running Autonomous Routine", autonNumber);
		auton6(); //Runs auton6 - no actions are coded
		break;
	case 0:
		SmartDashboard::PutNumber("Running Autonomous Routine", autonNumber);
		//Case to use if we want nothing to happen in autonomous
		break;
	default:
		SmartDashboard::PutNumber("Running Autonomous Routine", 00);
		//Does nothing if we do not match a predefined case
		break;

	} //End of the switch

}



// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
   // return IsTimedOut();
	return false;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	Robot::driveTrain->autoDrive(0.0, 0.0, 0.0, 0.0); //full stop
	RobotMap::ballVibrator->Set(0.0); //stop
	Robot::shooter->shooterMotor->Set(0.0); //stop
	Robot::shooter->shooterMotor2->Set(0.0); //stop
	RobotMap::ballFeederBallFeederSpike->Set(0.0); //stop
	RobotMap::ballSubFeeder->Set(0.0); //stop
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {
	End();
}

//Setter and Getter for the autonStep
void AutonomousCommand::setAutonStep(int nextStep){
	this->autonStep = nextStep;
	SmartDashboard::PutNumber("Auton Step", autonStep);
}
int AutonomousCommand::getAutonStep(){
	return this->autonStep;
}

//Setter and Getter for the elapsedTime
void AutonomousCommand::setElapsedTime(double startTime){
	this->elapsedTime = Timer::GetFPGATimestamp() - startTime; //time since started
	SmartDashboard::PutNumber("Elapsed Time", elapsedTime);
}
double AutonomousCommand::getElapsedTime(){
	return this->elapsedTime;
}

//Setter and Getter for the startTime
void AutonomousCommand::setStartTime(double startTime){
	this->startTime = Timer::GetFPGATimestamp(); //just set it to the start time
	SmartDashboard::PutNumber("Start Time", this->startTime);
}
double AutonomousCommand::getStartTime(){
	return this->startTime;
}

//Setter and Getter for the usedEncDist
void AutonomousCommand::setUsedEncDist(float totalDist){
	this->usedEncDist = totalDist;
}
float AutonomousCommand::getUsedEncDist(){
	return this->usedEncDist;
}

//Setter and Getter for the strafeRightDist
void AutonomousCommand::setUsedStrafeRightEncDist(float totalStrafeRightDist){
	this->strafeRightDist = totalStrafeRightDist;
}
float AutonomousCommand::getStrafeRightEncDist(){
	return this->strafeRightDist;
}

/******** Autonomous Routine 1 Starts Here **********/
void AutonomousCommand::auton1(){
	//Routine one Starts the shooter, subshooter, ball vibrator, and x-mas tree
	//and runs it up to 15 seconds

	//Display to the SmartDashboard
	SmartDashboard::PutNumber("Autonomous Routine", 1);

	//Determine which step we want to run based on the elapsed time
	/******** ALL TIME CHANGES CAN BE MADE HERE FOR ROUTINE 1 **********/
	if (getElapsedTime() < 15 ) { //If less the 15 seconds have passed
		setAutonStep(1); //Stay on step 1
	}
	else if (getElapsedTime() >= 15){ //if 15 seconds or more have passed
		setAutonStep(2); //Go to Step 2
	}

	/********* CHANGES TO WHAT A COMMAND DOES SHOULD BE DONE HERE *********/
	if (getAutonStep() == 1){ //1. Start the shooter, subshooter, ball vibrator, and x-mas tree
		Robot::shooter->justShootMe(); //start both shooter motors with PID control
		RobotMap::ballVibrator->Set(0.25);
		RobotMap::ballFeederBallFeederSpike->Set(0.5); //the tree (no longer on a spike relay)
		RobotMap::ballSubFeeder->Set(0.75); //The subfeeder
		RobotMap::conveyerSpeedController1->Set(0.8);
	}
	if (getAutonStep() == 2){ //2. Stop everything we started in step 1
		RobotMap::ballVibrator->Set(0.0); //full stop of step 1
		Robot::shooter->shooterMotor->Set(0.0); //full stop of step 1
		Robot::shooter->shooterMotor2->Set(0.0); //full stop of step 1
		RobotMap::ballFeederBallFeederSpike->Set(0.0); //full stop of step 1
		RobotMap::ballSubFeeder->Set(0.0); //full stop of step 1
		RobotMap::conveyerSpeedController1->Set(0.0); //full stop of step 1
	}
}

/******** Autonomous Routine 2 Starts Here **********/
void AutonomousCommand::auton2(){
	SmartDashboard::PutNumber("Autonomous Routine", 2);

	//Determine which step we want to run based on the elapsed time
	/******** ALL TIME CHANGES CAN BE MADE HERE FOR ROUTINE 2 **********/
	if (getElapsedTime() < 1.5 ) {
		setAutonStep(1); //drive forward"
	}
	else if (getElapsedTime() >= 1.5 && getElapsedTime()<2.7){
		setAutonStep(2); //turn left to -90 degrees (or till time is up)
	}
	else if (getElapsedTime() >= 2.7 && getElapsedTime()<7.7){
		setAutonStep(3); //drive forward
	}
	else if (getElapsedTime() >= 7.7 && getElapsedTime()< 8.3){
		setAutonStep(4); //turn left turn left to -135 degrees (or till time is up)
	}
	else if (getElapsedTime() >= 8.3){
		setAutonStep(5); //shoots
	}


	/********* CHANGES TO WHAT A COMMAND DOES SHOULD BE DONE HERE *********/
	if (getAutonStep() == 1){ //Drive forward
		Robot::driveTrain->autoDrive(0.0, 0.6, 0.0, RobotMap::drivegyro->GetAngle());
	}
	if (getAutonStep() == 2){ //Turn Left to -90 degrees
		SmartDashboard::PutString("Turning to", "-90 degrees");
		double angleToTurnTo = -90.00;
		double maxGyroAngle = angleToTurnTo -2; //subtract if turning left
		double minGyroAngle = angleToTurnTo +2; //add if turning right

		if (RobotMap::drivegyro->GetAngle() > maxGyroAngle && RobotMap::drivegyro->GetAngle() < minGyroAngle){
			// within 2 degrees of goal angle .. no more turning
			Robot::driveTrain->autoDrive(0.0, 0.0, 0.0, 0.0);
		}
		else if (RobotMap::drivegyro->GetAngle() > minGyroAngle){
			//we need to continue turning left
			Robot::driveTrain->autoDrive(0.0, 0.0, -0.3, 0.0);
		}
		else if (RobotMap::drivegyro->GetAngle() < maxGyroAngle){
			//We went too far, turn to the right a little slower
			Robot::driveTrain->autoDrive(0.0, 0.0, 0.25, 0.0);
		}
	}

	if (getAutonStep() == 3){ //Drive Forward
		Robot::driveTrain->autoDrive(0.0, 0.6, 0.0, RobotMap::drivegyro->GetAngle());
	}

	if (getAutonStep() == 4){ //turn to -135 degrees
		SmartDashboard::PutString("Turning to", "-135 degrees");
		double angleToTurnTo = -135.00;
		double maxGyroAngle = angleToTurnTo -2; //subtract if turning left
		double minGyroAngle = angleToTurnTo +2; //add if turning right

		if (RobotMap::drivegyro->GetAngle() > maxGyroAngle && RobotMap::drivegyro->GetAngle() < minGyroAngle){
			// within 2 degrees of goal angle .. no more turning
			Robot::driveTrain->autoDrive(0.0, 0.0, 0.0, 0.0);
		}
		else if (RobotMap::drivegyro->GetAngle() > minGyroAngle){
			//we need to continue turning left
			Robot::driveTrain->autoDrive(0.0, 0.0, -0.3, 0.0);
		}
		else if (RobotMap::drivegyro->GetAngle() < maxGyroAngle){
			//We went too far, turn to the right a little slower
			Robot::driveTrain->autoDrive(0.0, 0.0, 0.25, 0.0);
		}
	}


	if (getAutonStep() == 5){ //Do some shooting
		//SmartDashboard::PutString("Shooting");
		Robot::driveTrain->autoDrive(0.0, 0.0, 0.0, 0.0); //full stop
		Robot::shooter->justShootMe(); //Runs both motors with pid control
		RobotMap::ballVibrator->Set(0.25);
		RobotMap::ballFeederBallFeederSpike->Set(0.5); //the tree (no longer on a spike relay)
		RobotMap::ballSubFeeder->Set(0.75); //The subfeeder
		RobotMap::conveyerSpeedController1->Set(0.8);
	}


	if (getAutonStep() == 6){ //Stop Everything
		Robot::driveTrain->autoDrive(0.0, 0.0, 0.0, 0.0); //full stop of step 5
		RobotMap::ballVibrator->Set(0.0); //full stop of step 5
		Robot::shooter->shooterMotor->Set(0.0); //full stop of step 5
		Robot::shooter->shooterMotor2->Set(0.0); //full stop of step 5
		RobotMap::ballFeederBallFeederSpike->Set(0.0); //full stop of step 5
		RobotMap::ballSubFeeder->Set(0.0); //full stop of step 5
		RobotMap::conveyerSpeedController1->Set(0.0);
	}

}

/******** Autonomous Routine 3 Starts Here **********/
void AutonomousCommand::auton3(){
	SmartDashboard::PutNumber("Autonomous Routine", 3);
}

/******** Autonomous Routine 4 Starts Here **********/
void AutonomousCommand::auton4(){
	SmartDashboard::PutNumber("Autonomous Routine", 4);
}

/******** Autonomous Routine 5 Starts Here **********/
void AutonomousCommand::auton5(){
	SmartDashboard::PutNumber("Autonomous Routine", 5);
}

/******** Autonomous Routine 6 Starts Here **********/
void AutonomousCommand::auton6(){
	SmartDashboard::PutNumber("Autonomous Routine", 6);
}


