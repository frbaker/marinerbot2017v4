// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveWithJoy.h"
#include <AHRS.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
AHRS *ahrs;
DriveWithJoy::DriveWithJoy(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveWithJoy::Initialize() {
	Robot::driveTrain->stop();


	//ahrs = new AHRS(SPI::Port::kMXP);
	//RobotMap::driveGyro->Reset();
	RobotMap::drivegyro->ZeroYaw();
}

// Called repeatedly when this Command is scheduled to run
void DriveWithJoy::Execute() {


	SmartDashboard::PutNumber("Drive Angle", RobotMap::drivegyro->GetAngle());
	double driveX = Robot::oi->getJoystick1()->GetRawAxis(0);
	double driveY = Robot::oi->getJoystick1()->GetRawAxis(1); //not sure why this is set to negative - change if erratic
	double driveZ = Robot::oi->getJoystick1()->GetRawAxis(2);
	double mrAngle = RobotMap::drivegyro->GetAngle();


	Robot::driveTrain->takeJoystickInputs(driveX, driveY, driveZ, mrAngle);
	//Robot::driveTrain->takeJoystickInputs(Robot::oi->getJoystick1()->GetRawAxis(0), Robot::oi->getJoystick1()->GetRawAxis(1)*-1,Robot::oi->getJoystick1()->GetRawAxis(2), RobotMap::drivegyro->GetAngle());



}
void DriveWithJoy::End() {
	Robot::driveTrain->stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveWithJoy::Interrupted() {
	Robot::driveTrain->stop();
}
// Make this return true when this Command no longer needs to run execute()
bool DriveWithJoy::IsFinished() {
    return false;
}

