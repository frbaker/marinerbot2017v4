// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include <AHRS.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<BallFeeder> Robot::ballFeeder;
std::shared_ptr<Conveyer> Robot::conveyer;
std::shared_ptr<GearMover> Robot::gearMover;
std::shared_ptr<Shooter> Robot::shooter;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<ShooterAdjuster> Robot::shooterAdjuster;
std::shared_ptr<Leds> Robot::leds;
std::shared_ptr<RopeGather> Robot::ropeGather;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    ballFeeder.reset(new BallFeeder());
    conveyer.reset(new Conveyer());
    gearMover.reset(new GearMover());
    shooter.reset(new Shooter());
    climber.reset(new Climber());
    shooterAdjuster.reset(new ShooterAdjuster());
    leds.reset(new Leds());
    ropeGather.reset(new RopeGather());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
	//RobotMap::driveGyro->Reset();


}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();

	double shooterVolts = RobotMap::shooterAdjusterShooterPot->GetAverageVoltage();

		SmartDashboard::PutNumber("Shooter Pot", shooterVolts);
	//double msAngle = RobotMap::driveGyro->GetYaw();

	//SmartDashboard::PutNumber("Drive Yaw",  RobotMap::driveGyro->GetYaw());
	//SmartDashboard::PutNumber("Drive Angle",  RobotMap::driveGyro->GetAngle());
	//SmartDashboard::PutNumber("Drive X",  RobotMap::driveGyro->GetRawGyroX());
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

